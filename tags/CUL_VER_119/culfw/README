Firmware for different busware.de gadgets

Copyright Rudolf Koenig, 2008.
License: GPL v2

These gadgets all feature one or more CC1101 transceiver and an Atmel MCU, so
the can be used for low-power wireless communication in the 868 band.

  blocks are an Atmel AT90USB162 MCU and a TI CC1101 transceiver.  See

- The CUL (CC110x USB Light) has one CC1101 and an AT90USB162 MCU.
  See http://busware.de/tiki-index.php?page=CUL for details and on how to buy
  it.
- The CUR (CC110x USB Remote) is a device with following features: CC1101 /
  AT90USB1286 / IR: TX & RX / 128x128 color display / 5-way jogdial / Battery.


This firmware makes it possible to use these devices with fhem. Right now the
following device families are supported:
- FS20
- FHT
- EM
- KS300/S300TH

Thanks to the MyUSB project (http://www.fourwalledcubicle.com/MyUSB.php, ) the
device/firmware combination confirms to the Universal Serial Bus Communication
Device Class Abstract Control Model (USB CDC ACM) specification, so it can be
used out of the box with a lot of operating systems. We incorporated the
relevant parts of MyUSB, version 1.5.2.


Prerequisites
=============
  You'll need following packets to install the firmware (in paranthesis is the
  version of the corresponding packet for my installation):
  - dfu-programmer (0.4.4)

  If you want to modify the firmware:
  - avr-libc       (1.6.2)
  - binutils-avr   (2.18)
  - gcc-avr        (4.3.0)


Compile (optional)
==================
  Change into your device directory (e.g. CUL)
  Type "make", which will output text like:
    Compiling C: FW_CUL.c
    [...]


Install / Flash the firmware
============================
  Change into your device directory (e.g. CUL)
  - CUL: Insert the USB-Stick while pressing the micro-switch.
  - CUR: Remove Battery/USB. Put the device on a table with the jogdial facing
         down. Press the case, until you hear the jogdial is pressed. Insert
         the battery, then the USB-Cable.

  A USB device "03eb:2ffa Atmel Corp." should appear.
  Now execute "make usbprogram", which will output text like:
    dfu-programmer at90usb162 erase
    dfu-programmer at90usb162 flash FW_CUL.hex
    Validating...
    6312 bytes used (51.37%)
    dfu-programmer at90usb162 start
  The last command will reset the device, a new USB device should appear:
  "03eb:204b Atmel Corp.", if it does try to reinsert the CUL without pressing
  the micro-switch.

Quick Test:
===========
  Linux
  =====
    Hopefully you see a device /dev/ttyACM0 (if you use a newer kernel, which
    loads the cdc_acm kernel module), or a /dev/ttyUSB0 (if your kernel uses
    usbserial). For usbserial kernel you may need to add the module options
    "usbserial vendor=0x03eb product=0x204b" to modprobe.conf.

    Connect to the device e.g. with "screen /dev/ttyACM0".

  Windows
  =======
    Install a virtual COM port, use MyUSB_USBtoSerial.inf from the tools
    directory. Locate the COM-port in the device manager shown as
    "USB Virtual Serial Port (COMx)". Start Hyperterminal, open a connection
    to COMx 9600,8,n,1.

  Type "V<return>". The string "V 1.0..." should appear. Type X01<return> to
  enable the data reporting.


Protocol
=========
  The data is readable ASCII with cr/nl as a message terminator.

  PC -> CUL:
  ----------
    The first byte is the command (case significant), the rest ist a hex string
    (case insignificant), non-hex characters will be ignored, you can insert
    spaces for aesthetic.  Commands are _not_ echoed.
    Following commands are supported:

    a
      (CUR only)
      display battery state

    B<hex>
      Reboot device.
      If <hex> is not 00 enter bootloader mode

    C<reg>
      <reg> is a (two digit) hex number: return the value of the cc1101
      register
      Example: C35 -> C35 = 0x0D / 13

    c<hex>
      (CUR only)
      Read/set the RTC. If hex is 01, then display the date, if it is 02 the
      time, if it is 03, then both date and time. If the length of hex is 6,
      then the RTC will be set to YYMMDDHHmmSS. Data is written BCD, i.e
      December is written as 12 and not as 0C.

    d<hex>data
      (CUR only)
      Choose the sub-function with the first two bytes (hex):
      - FF: LCD control, the next 4 bytes are:
        - LCD on (01) / on+cls (02) / off (00) / don't change (FF)
        - contrast: set directly (00-FE) / read from eeprom (FC) /
                    increase (FE) / decrease (FD) / don't change (FF)
      - 00: Set the title to the string following the 00
      - 01-08: Set the "body" lines 01-08 the the text
      - 09/0A: Insert a new line at the bottom/top of the screen,
               scrolling the rest.

    e (eeprom) factory reset
      - resets all eeprom values. A reboot is required to activate the
        changes.

    F<hex>
      Send out an FS20 message. <hex> is a hex string of the following form:
      hhhhaacc or hhhhaaccee, where 
      - hhhh is the FS20 housecode, 
      - aa is the FS20 device address, 
      - cc is the FS20 command
      - ee is the FS20 timespec. Note that cc must have the extension bit set.
      Example: F12340111

    l<hex>
      Set the led mode.
      - Bit 0: Set LED on/off
      - Bit 1: The LED will blink once a second if the bit is set

    P<hex><filename>
      (CUR only)
      Display a picture. The hex part consists of 4 bytes (x,y,w,h), and the
      file contains the data in a 12bit per pixel format. Use
      fonts/pgm2fourbit.pl with the raw option to convert raw PPM files into
      the needed format.

    R<AA> or R<AAAA>
      Read eeprom (i.e. "saved configuration") byte. Arguments: one or two
      byte hex address <AA> or <AAAA>
      Adress-Slots:
      - 0x00 - 0x01
        Eeprom magic bytes
      - 0x02 - 0x2A
        Configuration registers as described in the "Table 37: "SPI Address
        space" of the CC1101 datasheet (Version SWRS061C).  Note: all EEPROM
        Values have an offset of 2.
      - 0x2B - 0x32
        CC1101 PA Table (8 bytes).
      See fncollection.h for more details.
      Example: R00 -> 63

    r<filename>
      (CUR only)
      output the file name <filename>. First the length of the file,
      (hex 8 byte+nl) is written to the output, then the body of the file.
      Use "." as filename to get a listing of the current files with length.
      Use the program cur_file from the tools directory to read a file, e.g.:
        perl cur_file.pl -r MENU /dev/ttyACM0
      NOTE: No fhem/screen must be connected to the CUR while reading/writing

    s<hex>
      (CUR only)
      sleeptime. Switch everything off after <hex> seconds of joystick
      inactivity. An instant sleep is achieved by pressing the joystick.
      00 disables sleep.
      If the CUR is connected via USB then only the display will be switched
      off.

    T<hex>
      Send out an FHT message. The CUL can work in 2 different modes. The first
      one is to communicate with a number of FHT80b's. This is called the
      FHT80b mode. The second one is to act itself as a FHT80b and control up
      to 8 FHT8v actuators. This is called the FHT8v mode (not yet implemented).
      Note: the CUL can work in both modes at the same time.

      Special control commands:
      - T01<CCCC>
        Set the "own" housecode to CCCC. The first byte will be used as the FHZ
        code in in FHT80b mode. This command will also clear all buffers.
      - T01
        Return the own housecode (hex)
      - T02
        Return the FHT80b buffer. All FHT commands which are for other FHT's
        (not matching our own housecode) are placed in the FHT80b buffer, which
        has 50 slots. If an FHT80b is sending an actuator message, then the
        buffer will be searched for matching housecodes, and all found messages
        will be sent to this FHT80b.
      - T03
        Return the actuator buffer (used only in the FHT80v mode). The CUL will
        send out actuator commands every 116 second, if one of the actuator
        values are not ff. Set the actuator values with the "normal" FHT
        command T<CCCC>0vA6YY, where CCCC is the housecode of the CUL, v is the
        actuator number (use v=0 for all actuators), and YY is the value to be
        sent to the actuator. Example: T123400A610
      - T04
        Return the seconds (decimal) until the next actuator message for the
        own actuators. It is 0xff when no actuator messages are queued.

    t
      Output the time since boot. The output has the following form: 
      DDD HH:MM:SS:mmm. Note: the mmm msec has an 8msec resolution.
      Example: t -> 000 00:00:07.888


    V
      Print the firmware version.
      Example: V -> V 1.11 CUL 04


    W<AA><DD> or W<AAAA><DD>
      Write eeprom byte.  Arguments: one or two-byte hex address <AAAA>
      followed by one byte hex data <DD>. See R above for address (AAAA)
      explanation.
      Example: W1D06


    w<length><filename>
      (CUR only)
      write the file named <filename>. Length is hex, 8 bytes.
      The command must be followed by length bytes of data, which will be
      written to the local file.  If length is FFFFFFFF, then the file will be
      deleted.
      Use the program cur_file from the tools directory to write a file, e.g.:
        perl cur_file.pl -w MENU /dev/ttyACM0
      NOTE: No fhem/screen must be connected to the CUR while reading/writing


    X<RR> Enable data reporting.
      <RR> is a one-byte hex value, with following bits (bit 0 is the LSB bit):
      - Bit 0: Report known messages (parity & checksum ok), with type prefix.
      - Bit 1: Report each of the (repeated) packets of a message
      - Bit 2: Report detailed data, even with wrong parity / checksum.
      - Bit 3: Monitor mode: output an r/s/t/u on a risings edge (the letter
               depends on the internal state), g/h/i on a falling edge
      - Bit 4: Timing: in monitor mode output two additional bytes (high byte,
               low byte) of the internal microsecond timer. This is binary!
      - Bit 5: RSSI: report RSSI value as an additional HEX byte after digested
               data or as a separate byte if Bit 3 is set too.

      Note: 00 disables radio reception, any other value initialize the radio
      chip and enable reception.
      Default is 00: do not report anything, radio chip uninitialized.
      Example: X01

      If <RR> is not specified, report the current value.

    x<pp> Change PA tables.
      <pp> is a one-byte hex value, valid values are 00 to 09, with following
      values: the first 5 is -10/-5/0/5/10 dBm with PA ramping, the next 5 is
      the same without PA ramping. If the value is outside this spec, then the
      0dBm variant (02) will be used.
      Example: x03

    Unknown commands
      Prints the "help", the list of supported commands
      Example:
        ? -> ?? B C F R V W X


  CUL -> PC:
  ----------
    The CUL reports following data (as a HEX string, uppercase):

    For FS20:
      Fhhhhaacc or Fhhhhaaccee, explanation see above.
    For FHT:
      ThhhhNNNNNN
    For EM:
      Ettaacc111122223333
        tt:type 01=EM-1000s, 02=EM-100-EM, 03=1000GZ
        aa:address, depending on the type above 01:01-04, 02:05-08, 03:09-12
        cc:counter, will be incremented by one for each message
        1111: cumulated value
        2222: last value (Not set for type 2)
        3333: top value  (Not set for type 2)
    For KS300:
      KFFTTTHWHWWRRFR
        Data must be read backwards
    For S300TH:
      KaaTTHTHH
        Data must be read backwards
    For Hoermann Garage door openers:
      Hxxxxx
        Note: this protocol is not really understood.

    If bit 3 in the X command is set, then report raw data, even if it has a
    wrong checksum or parity
      b State Nzero NAvg Nsync Nbyte Nbit [RSSI] NNNNNNNN
        State  State of the rise-rise (4bit) and rise-fall (4bit) machines (hex)
        Nzero  time for the zero bit
        Navg   time for (zero+one)/2
        Nsync  Number of 0 sync bits
        Nbyte  Next byteidx to write
        Nbit   Next bit to write
        RSSI   RSSI, if the RSSI bit is set, see X cmd


  CUR Menu
  --------
    To define a menu on the CUR, follow this HOWTO:
    - create a fhem xml-list with
        fhem.pl fhemhost:7072 xmllist > fhem.xmllist
    - convert the template and the fhem listing into a CUR MENU file:
        perl xmllist2curmenu.pl fhem.xmllist CUR.menu.template > MENU
    - write the MENU file to the CUR:
        perl cur_file.pl -w MENU /dev/ttyACM0
      NOTE: The CUR must be in the X00 mode (default after reboot), and no
      fhem/screen should be connected to it.

    - switch the CUR display on by pressing the joystick.
    - To have a nice logo on the first screen, upload it to the CUR:
        cd fonts
        perl ../tools/cur_file.pl -w house2_58x60  /dev/ttyACM0

Notes
=====

- 1% LIMIT
  The firmware respects the 1% limit for this band, so only 128 messages per
  hour will be sent. The counter has a minute resolution.

- Repeat-filter
  The FS20 protocol sends each message 3 times. The firmware filters optionally
  (See Command X bit 3) repeated messages.

- cc1100 settings. See cc1100.h / official PDF from TI  for details.

  - Change receiver sensitivity / target amplitude

    AGCCTRL2 (0x1B), bits 2:0, target amplitude:
      0:24dB, 1:27dB, 2:30dB, 3:33dB, 4:36dB, 5:38dB, 6:40dB, 7:42dB
      Default value: C1B -> 07 (42dB).

    AGCCTRL0 (0x1D), bits 1:0, decision boundery
      0:4dB, 1:8dB, 2:12dB, 3:16dB
      Default value: C1D -> 91 (8db)

    Example: W1D06
    Note: R/W address = C+2

  - Change frequency 
     FREQ2(0D), FREQ1(0E), FREQ0(0F), Fosc = 26MHz
     Fcarrier = Fosc/65536*(FREQ2.FREQ1.FREQ0)

     Example: W0F21, W1065, W11E8 (868.35MHz, default)
              W0F21, W1062, W1176 (868.00MHz)
    Note: R/W address = C+2

  - Change channel bandwidth 
    MDMCFG4 (10). CHANBW_E (bits 7:6), CHANBW_M (bits 5:4)
    BWchannel =  Fosc/(8 * (4+CHANBW_M) * 2 ^ CHANBW_E)
    Example: W1255 (325KHz, default)
             W1245 (406KHz)
             W1235 (464KHz)
    Note: R/W address = C+2

  - Read-Only-Registers:
    RSSI:    : C34 -> 217 (217-256-74 = -113 dBm)
    MARCSTATE: C35 -> 01 (Idle), 13 (RX)


TODO/BUGS:
==========
  - CU* "clean/good" send
  - CU* FHT send
  - CU* FS20 dim commands do not repeat.
  - CU* HMS reception (Manchester code)
  - CUR fhem MENU/files creation support
  - CUR RTC interrupts
  - CUR check for FS20 group commands
  - CUR umlauts
  - CUR sleep problems: FS20 1%-management
  - CUR Infrared send/learn
  - CUR Radio/Ir bridging
  - CU* Fast data transfer using the cc1101
  - CUR Xfer&Display plots from fhem
  - CU* Compute S300TH/KS300 second half of checksum (Nice to have)
  - CU* MyUSB upgrade
